package swen221.picturepuzzle.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

import swen221.picturepuzzle.model.Board;
import swen221.picturepuzzle.model.Location;
import swen221.picturepuzzle.moves.Move;
import swen221.picturepuzzle.moves.Rotation;

/**
 * Tests for Part 3 of the assignment. We need a board where each cell is more
 * than just a single pixel to properly test this. Note that 2x2 cells is still
 * not enough to properly test rotation. That's because the rotation algorithm
 * can appear to work correctly on 2x2 cells, but still not work correctly on
 * larger cells (e.g. 3x3 or 4x4).
 *
 * @author David J. Pearce
 *
 */
public class Part3Tests {
	/**
	 * Test can create much larger 6x6 board where each cell is 2x2.
	 */
	@Test public void test_01() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test single move on 6x6 board.
	 */
	@Test public void test_02() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(0,1)));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test single move on 6x6 board.
	 */
	@Test public void test_03() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(1,2)));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 |                  | #000037  #000038 |\n" +
			"| #000041  #000042 |                  | #000043  #000044 |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test (empty) rotation on 6x6 board.
	 */
	@Test public void test_04() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,0),0));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test another (empty) rotation on 6x6 board.
	 */
	@Test public void test_05() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,1),0));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test another (empty) rotation on 6x6 board.
	 */
	@Test public void test_06() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,1),0));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test single rotation on 6x6 board.
	 */
	@Test public void test_07() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,0),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000017  #000011 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000018  #000012 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test another single rotation on 6x6 board.
	 */
	@Test public void test_08() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,1),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000029  #000023 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000030  #000024 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test another single rotation on 6x6 board.
	 */
	@Test public void test_09() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,2),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}

	/**
	 * Test quadruple rotation on 6x6 board (i.e. that rotates back to how it
	 * was).
	 */
	@Test public void test_10() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,0),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_11() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,2),3));
		board.apply(new Rotation(new Location(1,0),0));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_12() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,0),0));
		board.apply(new Rotation(new Location(0,1),0));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_13() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,0),2));
		board.apply(new Rotation(new Location(1,0),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000014  #000020 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000013  #000019 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_14() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,0),1));
		board.apply(new Rotation(new Location(0,1),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000021  #000015 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000022  #000016 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000029  #000023 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000030  #000024 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_15() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,0),2));
		board.apply(new Rotation(new Location(1,1),1));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000018  #000017 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000012  #000011 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000031  #000025 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000032  #000026 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_16() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,0),4));
		board.apply(new Rotation(new Location(2,0),3));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000016  #000022 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000015  #000021 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_17() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,1),3));
		board.apply(new Rotation(new Location(2,0),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000026  #000032 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000025  #000031 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_18() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,2),1));
		board.apply(new Rotation(new Location(0,1),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000041  #000035 | #000037  #000038 |                  |\n" +
			"| #000042  #000036 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_19() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(1,2)));
		board.apply(new Rotation(new Location(1,2),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 |                  | #000037  #000038 |\n" +
			"| #000041  #000042 |                  | #000043  #000044 |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_20() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,2),1));
		board.apply(new Rotation(new Location(2,2),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000043  #000037 |                  |\n" +
			"| #000041  #000042 | #000044  #000038 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_21() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,1),2));
		board.apply(new Rotation(new Location(2,2),2));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000032  #000031 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000026  #000025 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_22() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(2,1)));
		board.apply(new Rotation(new Location(2,1),1));
		board.apply(new Move(new Location(1,2)));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 |                  |\n" +
			"| #000029  #000030 | #000031  #000032 |                  |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 | #000027  #000028 |\n" +
			"| #000041  #000042 | #000043  #000044 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_23() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(2,1)));
		board.apply(new Rotation(new Location(2,1),1));
		board.apply(new Rotation(new Location(2,2),2));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 |                  |\n" +
			"| #000029  #000030 | #000031  #000032 |                  |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 | #000034  #000033 |\n" +
			"| #000041  #000042 | #000043  #000044 | #000028  #000027 |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_24() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(0,0)));
		board.apply(new Rotation(new Location(2,2),1));
		board.apply(new Rotation(new Location(2,2),2));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_25() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,0),0));
		board.apply(new Rotation(new Location(0,2),4));
		board.apply(new Rotation(new Location(0,1),3));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000024  #000030 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000023  #000029 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_26() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,2),4));
		board.apply(new Move(new Location(2,1)));
		board.apply(new Rotation(new Location(1,1),3));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000026  #000032 |                  |\n" +
			"| #000029  #000030 | #000025  #000031 |                  |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 | #000027  #000028 |\n" +
			"| #000041  #000042 | #000043  #000044 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_27() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(1,2),4));
		board.apply(new Rotation(new Location(0,2),0));
		board.apply(new Rotation(new Location(0,0),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test move and rotation combination on 6x6 board.
	 */
	@Test public void test_28() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Move(new Location(0,2)));
		board.apply(new Rotation(new Location(0,0),1));
		board.apply(new Rotation(new Location(0,0),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000017  #000011 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000018  #000012 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_29() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(0,2),4));
		board.apply(new Rotation(new Location(1,2),2));
		board.apply(new Rotation(new Location(0,0),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000044  #000043 |                  |\n" +
			"| #000041  #000042 | #000038  #000037 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
	/**
	 * Test multiple rotation operations on 6x6 board.
	 */
	@Test public void test_30() {
		int[] image = {
			0x000011, 0x000012, 0x000013, 0x000014, 0x000015, 0x000016,
			0x000017, 0x000018, 0x000019, 0x000020, 0x000021, 0x000022,
			0x000023, 0x000024, 0x000025, 0x000026, 0x000027, 0x000028,
			0x000029, 0x000030, 0x000031, 0x000032, 0x000033, 0x000034,
			0x000035, 0x000036, 0x000037, 0x000038, 0x000039, 0x000040,
			0x000041, 0x000042, 0x000043, 0x000044, 0x000045, 0x000046,
		};
		// Create board
		Board board = new Board(image,6,3);
		// Apply operation sequence
		board.apply(new Rotation(new Location(2,0),4));
		board.apply(new Rotation(new Location(1,0),0));
		board.apply(new Rotation(new Location(1,2),4));
		// Check output
		assertEquals(
			"+------------------+------------------+------------------+\n" +
			"| #000011  #000012 | #000013  #000014 | #000015  #000016 |\n" +
			"| #000017  #000018 | #000019  #000020 | #000021  #000022 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000023  #000024 | #000025  #000026 | #000027  #000028 |\n" +
			"| #000029  #000030 | #000031  #000032 | #000033  #000034 |\n" +
			"+------------------+------------------+------------------+\n" +
			"| #000035  #000036 | #000037  #000038 |                  |\n" +
			"| #000041  #000042 | #000043  #000044 |                  |\n" +
			"+------------------+------------------+------------------+\n"
		,board.toString());
	}
}